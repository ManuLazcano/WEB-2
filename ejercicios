const express = require('express')
const app = express()
const port = 3000
const bodyParser = require('body-parser')
const { Sequelize, DataTypes } = require('sequelize');

// TO-DO: DB browser for SQLite 

const sequelize = new Sequelize({
    storage: 'db_musicos.db',
    dialect: 'sqlite',
    define: {
      defaultScope: {
        attributes: { exclude: ['createdAt', 'updatedAt', 'cursadaId'] },
      },
    },
});

const Alumno = sequelize.define('alumnos', {
    nombre: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notNull: {
          msg: 'El campo "nombre" no puede ser nulo'
        },
        notEmpty: {
          msg: 'El campo "nombre" no puede estar vacío'
        }
      }
    },
    // TO-DO: Crear una validación para el email
    email: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          notNull: {
            msg: 'El campo "email" no puede ser nulo'
          },
          notEmpty: {
            msg: 'El campo "email" no puede estar vacío'
          }
        } 
    },
    fecha_nacimiento: {
        type: DataTypes.DATE,
        allowNull: false,
        validate: {
          notNull: {
            msg: 'El campo "fecha_nacimiento" no puede ser nulo'
          },
          notEmpty: {
            msg: 'El campo "fecha_nacimiento" no puede estar vacío'
          }
        } 
    }
});

const Cursada = sequelize.define('cursadas', {
    materia: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notNull: {
          msg: 'El campo "materia" no puede ser nulo'
        },
        notEmpty: {
          msg: 'El campo "materia" no puede estar vacío'
        }
      }
    },
    anio: {
        type: DataTypes.INTEGER,
        allowNull: false,
        validate: {
          notNull: {
            msg: 'El campo "anio" no puede ser nulo'
          },
          notEmpty: {
            msg: 'El campo "anio" no puede estar vacío'
          },
          max: 2100,
          min: 1,
        }
    },
    cuatrimestre: {
        type: DataTypes.INTEGER,
        allowNull: false,
        validate: {
          notNull: {
            msg: 'El campo "cuatrimestre" no puede ser nulo'
          },
          notEmpty: {
            msg: 'El campo "cuatrimestre" no puede estar vacío'
          },
          isIn: {
            args: [[1, 2]],
            msg: 'El campo "cuatrimestre" debe ser una de las siguientes opciones: 1 o 2'
          }
        } 
    },
    aprobada: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        validate: {
          notNull: {
            msg: 'El campo "aprobada" no puede ser nulo'
          },
          notEmpty: {
            msg: 'El campo "aprobada" no puede estar vacío'
          },
          isIn: {
            args: [[0, 1, false, true]],
            msg: 'El campo "aprobada" debe ser una de las siguientes opciones: 0, 1, false, true'
          }
        } 
    }
});

Cursada.belongsToMany(Alumno, { as: 'alumnos',  through: 'alumnosCursadas' });
Alumno.belongsToMany(Cursada, { as: 'cursadas',  through: 'alumnosCursadas' });


app.use(bodyParser.json());

sequelize.sync()
    .then(() => {
        app.listen(port, () => {
        popular();
        console.log('El servidor está corriendo en el puerto ' + port);
        });
    })
    .catch((error) => {
        console.error('Error al sincronizar la base de datos:', error);
    });

app.get('/alumnos', async (req, res) => {
    const data = await Alumno.findAll()
    res.json(data)
});
      
app.get('/alumnos/:id', async (req, res) => {
    const { id } = req.params;

    try {
        // const unAlumno = await Alumno.findByPk(id);
        // TO-DO: relacionar cursadas
      const unAlumno = await Alumno.findByPk(id, {
        include: 'cursadas'
      });
      if (unAlumno === null) {
        res.status(404).json({ error: `No se encontró el alumno con ID ${id}.` });
      } else {
        res.json(unAlumno);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Ha ocurrido un error al ejecutar la consulta.' });
    }
});

app.post('/alumnos/', async (req, res) => {
    try {
      const unAlumno = await Alumno.build(req.body);
      await unAlumno.validate();
      const unAlumnoValidado = await Alumno.create(req.body);
      res.json({id: unAlumnoValidado.id});
    } catch (error) {
      console.error(error);
      res.status(409).json({ errores: error.errors.map(function (e) {return e.message;}) });
    }
});

app.patch('/alumnos/:id', async (req, res) => {
    const { id } = req.params;
    const unAlumno = req.body;
    
    try {
      const [, affectedRows] = await Alumno.update(
        unAlumno,
        { where: { id } }
      );
      if (affectedRows === 0) {
        res.status(404).json({ error: `No se encontró el alumno con ID ${id}.` });
      } else {
        res.json({ id: id });
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Ha ocurrido un error al actualizar los datos.' });
    }
});

app.delete('/alumnos/:id', async (req, res) => {
    const { id } = req.params;

    try {
      const unAlumno = await Alumno.findOne({ where: { id } });
      if (!unAlumno) {
        return res.status(404).json({ error: 'Alumno no encontrado' });
      }
      await unAlumno.destroy();
      res.json('ok');
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Internal server error' });
    }
});
  

async function popular() {
    const qAlumnos = await Alumno.count();
    const qCursadas = await Cursada.count();
    if(qAlumnos==0 && qCursadas==0) {
        const alumnoCursadas = [
            { alumnoId: 1, cursadaId: 2},
            { alumnoId: 1, cursadaId: 1},
            { alumnoId: 3, cursadaId: 3},
            { alumnoId: 3, cursadaId: 2},
        ];

        const alumnos = [
        { nombre: 'Jimi Hendrix', email: 'Jimi@gmail.com', fecha_nacimiento: Date.now() },
        { nombre: 'Jimi Hendrix', email: 'Jimi@gmail.com', fecha_nacimiento: Date.now() },
        { nombre: 'Jimi Hendrix', email: 'Jimi@gmail.com', fecha_nacimiento: Date.now() },
        { nombre: 'Jimi Hendrix', email: 'Jimi@gmail.com', fecha_nacimiento: Date.now() }
        ];
    
        const cursadas = [
        { materia: 'Programacion', anio: 2024, cuatrimestre: 1, aprobada: true },
        { materia: 'Programacion', anio: 2024, cuatrimestre: 1, aprobada: true },
        { materia: 'Programacion', anio: 2024, cuatrimestre: 1, aprobada: true },
        { materia: 'Programacion', anio: 2024, cuatrimestre: 1, aprobada: true },
        ];
        let aluumnosObj = await Alumno.bulkCreate(alumnos, { validate: true });
        let cursadasObj = await Cursada.bulkCreate(cursadas, { validate: true });
        cursadasObj.forEach(function (c) {
            c.addAlumnos(aluumnosObj);
        });

    }
}
